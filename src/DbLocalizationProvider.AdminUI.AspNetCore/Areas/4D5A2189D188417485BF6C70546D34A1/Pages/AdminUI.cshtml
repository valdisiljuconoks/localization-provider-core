
@page "{handler?}"

@using DbLocalizationProvider.AdminUI.AspNetCore
@using DbLocalizationProvider.AspNetCore
@using DbLocalizationProvider.AspNetCore.Extensions
@using Microsoft.AspNetCore.Mvc.Localization

@model DbLocalizationProvider.AdminUI.AspNetCore.Areas._4D5A2189D188417485BF6C70546D34A1.Pages.AdminUIViewModel

@inject IHtmlLocalizer<Resources> Localizer
@inject UiConfigurationContext Config

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@Localizer.GetString(_ => _.Title)</title>
    <link rel="stylesheet" href="res/node_modules.bootstrap.dist.css.bootstrap.min.css">
    <link rel="stylesheet" href="res/node_modules.vue_directive_tooltip.css.index.min.css">
    <link rel="stylesheet" href="res/node_modules._fortawesome.fontawesome_free.css.all.min.css">
    <style type="text/css">
        body {
            margin: 10px;
        }

        h1 {
            font-size: 24px;
        }

        [v-cloak] {
            display: none;
        }

        textarea {
            width: 100%;
            -moz-box-sizing: border-box;
            -webkit-box-sizing: border-box;
            -ms-box-sizing: border-box;
            box-sizing: border-box;
            border-color: #A9A9A9;
            border-width: 1px;
        }

        .error {
            color: red;
        }

        .full-width-tooltip {
            max-width: 1200px;
        }

        .dropdown-item-checked::before {
            position: absolute;
            left: .4rem;
            content: '✓';
            font-weight: 600;
        }

        .modal-mask {
            position: fixed;
            z-index: 9998;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, .5);
            display: table;
            transition: opacity .3s ease;
        }

        .modal-wrapper {
            display: table-cell;
            vertical-align: middle;
        }

        .modal-container {
            width: 750px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 2px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, .33);
            transition: all .3s ease;
            font-family: Helvetica, Arial, sans-serif;
        }

        .modal-header {
            padding: 0;
        }

        .modal-header .header {
            font-weight: bold;
        }

        .modal-body {
            margin: 20px 0;
            padding: 0;
        }

        .modal-footer {
            padding: 0;
            border-top: none;
        }

        .modal-default-button {
            float: right;
        }

        .btn-default {
            border-color: #A9A9A9;
        }

        .modal-enter, .modal-leave {
            opacity: 0;
        }

        .modal-enter .modal-container,
        .modal-leave .modal-container {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }

        .translation {
            color: blue;
            text-decoration: underline;
            cursor: pointer;
        }

        .translation.empty {
            color: red;
            text-decoration-style: dotted;
        }

        i.fas.fa-cog {
            margin-right: 5px;
        }
    </style>

    @if(!string.IsNullOrEmpty(UiConfigurationContext.Current.CustomCssPath))
    {
        <link rel="stylesheet" href="@UiConfigurationContext.Current.CustomCssPath">
    }
</head>
<body class="container-fluid">

<script type="text/x-template" id="modal-template">
    <div class="modal-mask" transition="modal" @@keydown.esc="$emit('close')">
        <div class="modal-wrapper">
            <div class="modal-container">
                <div class="modal-header">
                    <span name="header" class="header" v-bind:title="model.key">{{ model.titleKey }}</span>
                </div>
                <div class="modal-body">
                    <textarea rows="6" cols="50" v-model="model.translation" id="translation" ref="translationEditor"></textarea>
                </div>
                <div class="modal-footer">
                <slot name="footer">
                    <button class="modal-default-button btn btn-primary" @@click="$emit('save')">@Localizer.GetString(_ => _.Save)</button>
                    <button class="modal-default-button btn btn-danger" :disabled="!model.isModified" @@click="$emit('remove')">@Localizer.GetString(_ => _.Remove)</button>
                    <button class="modal-default-button btn btn-default" @@click="$emit('close')">@Localizer.GetString(_ => _.Cancel)</button>
                </slot>
                </div>
            </div>
        </div>
    </div>
</script>

<div id="app" v-cloak>
    <div style="min-height: 75px;" class="row align-items-center">
        <div class="col-lg-6">
            <span class="float-left">
                <span class="h1">@Localizer.GetString(_ => _.Header)</span>
            </span>
        </div>
        <div class="col-lg-6">
            <div class="float-right">
                <a href="?handler=Export&format=json" role="button" class="btn btn-light">@Localizer.GetString(_ => _.Export)</a>
                <a href="?handler=CleanCache" onclick="return confirm('@Localizer.GetString(_ => _.CleanCacheConfirmation)');" role="button" class="btn btn-light">@Localizer.GetString(_ => _.CleanCache)</a>
                @*<div class="btn-group">
                    <button type="button" class="btn btn-light">@Localizer.GetString(_ => _.Import)</button>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-light">@Localizer.GetString(_ => _.Languages)</button>
                </div>*@
                <div class="btn-group dropdown">
                    <button type="button" class="btn btn-light dropdown-toggle" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fas fa-cog"></i>@Localizer.GetString(_ => _.Settings)</button>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuLink">
                        <a class="dropdown-item" :class="{ 'dropdown-item-checked': model.options.showHiddenResources }" href="#" @@click="toggleHiddenResources">@Localizer.GetString(_ => _.ShowHiddenResources)</a>
                        <a class="dropdown-item" :class="{ 'dropdown-item-checked': model.options.showOnlyEmptyResources }" href="#" @@click="toggleEmptyResources">@Localizer.GetString(_ => _.ShowOnlyEmptyResources)</a>
                        <a class="dropdown-item dropdown-item-checked disabled" href="#">@Localizer.GetString(_ => _.TableView)</a>
                        <a class="dropdown-item" href="#" @@click="showTreeView">@Localizer.GetString(_ => _.TreeView)</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <modal v-if="model.showModal" @@save="save" @@remove="remove" @@close="model.showModal = false" :model="model.currentResource"></modal>
    <div class="row">
        <div class="form-group offset-lg-9 col-lg-3">
            <input type="text" class="form-control" v-model="model.searchKeyword" placeholder="@Localizer.GetString(_ => _.SearchPlaceholder)"/>
        </div>
    </div>
    <span class="error">{{model.error}}</span>
    <div classs="table-responsive">
        <table v-show="!model.loading" class="table table-bordered table-hover table-sm">
            <thead class="thead-dark">
            <tr>
                <th>@Localizer.GetString(_ => _.ResourceKeyColumn)</th>
                <th v-if="model.options.showInvariantCulture">@Localizer.GetString(_ => _.InvariantCultureColumn)</th>
                <th v-for="lang in model.supportedLanguages" scope="col">{{lang.titleDisplay}}</th>
                <th>@Localizer.GetString(_ => _.HiddenColumn)</th>
                <th>@Localizer.GetString(_ => _.FromCodeColumn)</th>
                @if (!Config.HideDeleteButton)
                {
                    <th>@Localizer.GetString(_ => _.DeleteColumn)</th>
                }
            </tr>
            </thead>
            <tr v-for="resource in filteredResources">
                <td>
                    <span :title="model.key" v-tooltip.click="{ content: resource.key, class: 'full-width-tooltip' }">{{ resource.displayKey }}</span>
                </td>
                <td v-if="model.options.showInvariantCulture">
                    <span>{{ resource["_"] }}</span>
                </td>
                <td v-for="lang in model.supportedLanguages">
                    <span class="translation" @@click="edit(resource, lang.code)" v-show="resource[lang.code] && resource[lang.code].trim() != ''">{{ resource[lang.code] }}</span>
                    <span class="translation empty" @@click="edit(resource, lang.code)" v-show="resource[lang.code] != null && resource[lang.code].trim() == ''">@Localizer.GetString(_ => _.EmptyTranslation)</span>
                    <span class="translation empty" @@click="edit(resource, lang.code)" v-show="resource[lang.code] == null">N/A</span>
                </td>
                <td>{{ resource.isHidden }}</td>
                <td>{{ resource.isFromCode }}</td>
                @if (!Config.HideDeleteButton)
                {
                    <td><a href="#" class="btn" v-bind:class="{ disabled: resource.isFromCode }" @@click="deleteResource(resource)"><i class="fas fa-trash"></i></a></td>
                }
            </tr>
        </table>
    </div>
</div>

<script src="res/node_modules.jquery.dist.jquery.js"></script>
<script src="res/node_modules.popper.js.dist.umd.popper.js"></script>
<script src="res/node_modules.bootstrap.dist.js.bootstrap.js"></script>
<script src="res/node_modules.vue.dist.vue.min.js"></script>
<script src="res/node_modules.axios.dist.axios.min.js"></script>
<script src="res/node_modules.vue_directive_tooltip.dist.vueDirectiveTooltip.min.js"></script>

<script type="text/javascript">
    Vue.component('modal', {
        template: '#modal-template',
        props: {
            model: Object
        },
        data: function() {
            return {
                open: false
            };
        },
        mounted: function() {
            this.$refs.translationEditor.focus();
        }
    });

    Vue.use(vueDirectiveTooltip, {
        delay: 500,
        placement: 'top',
        triggers: ['hover'],
        offset: 0
    });

    var vm = {
        resources: [],
        supportedLanguages: [],
        loading: true,
        showModal: false,
        currentResource: {},
        searchKeyword: '',
        error: '',
        options: {
            showInvariantCulture: false,
            showHiddenResources: false,
            showOnlyEmptyResources: false,
            showDeleteButton: true
        }
    };

    var app = new Vue({
        el: '#app',
        data: {
            model: vm
        },
        methods: {
            loadData() {
                axios.get('api/service/get').then((response) => {
                    if (isObject(response.data)) {
                        var result = response.data;
                        this.model.resources = result.resources;
                        this.model.supportedLanguages = result.languages;
                        this.model.loading = false;
                        this.model.error = '';
                        this.model.options = result.options;
                    } else {
                        this.model.error = '@Localizer.GetString(_ => _.ErrorLoadingResources)';
                    }
                }).catch(function(error) { alert('error retrieving resources: ' + error); });
            },

            edit(resource, lang) {
                this.model.currentResource = {
                    titleKey: resource.titleKey,
                    key: resource.key,
                    translation: resource[lang],
                    language: lang,
                    isModified: resource.isModified
                };

                this.model.showModal = true;
            },

            save() {
                this.model.showModal = false;
                axios.post('api/service/save', this.model.currentResource);

                // update viewmodel
                var editedResource = this.model.resources.find((r) => { return r.key == this.model.currentResource.key; });
                if (editedResource != null) {
                    editedResource[this.model.currentResource.language] = this.model.currentResource.translation;
                    editedResource.isModified = true;
                }
            },

            remove() {
                if (confirm('@Localizer.GetString(_ => _.RemoveConfirmation)')) {
                    this.model.showModal = false;
                    axios.post('api/service/remove', this.model.currentResource);
                    var editedResource = this.model.resources.find((r) => { return r.key == this.model.currentResource.key; });
                    if (editedResource != null) {
                        editedResource[this.model.currentResource.language] = null;
                    }
                }
            },

            deleteResource(resource) {
                if(confirm('@Localizer.GetString(_ => _.DeleteConfirmation)')) {
                    axios.post('api/service/delete', resource).then(() => {
                        this.model.resources.splice(this.model.resources.indexOf(resource), 1);
                    });
                }
            },

            toggleHiddenResources() {
                this.model.options.showHiddenResources = !this.model.options.showHiddenResources;
            },

            toggleEmptyResources() {
                this.model.options.showOnlyEmptyResources = !this.model.options.showOnlyEmptyResources;
            },

            showTreeView() {
                window.location.href = window.location.origin + window.location.pathname + 'tree/';
            }
        },
        computed: {
            filteredResources() {
                var upperSearch = this.model.searchKeyword.toUpperCase();
                var result = this.model.resources;

                if (!this.model.options.showHiddenResources)
                    result = result.filter(r => !r.isHidden);

                if (this.model.options.showOnlyEmptyResources)
                    result = result.filter(r => Object.values(r).some(v => v == null));

                if(upperSearch !== null)
                    result = result.filter(r => Object.values(r).some(v => String(v).toUpperCase().includes(upperSearch)));

                return result;
            }
        }
    });

    function isObject(obj)
    {
        return obj !== undefined && obj !== null && obj.constructor == Object;
    }

    document.onreadystatechange = function() {
        if (document.readyState == 'interactive') {
            app.loadData();
        }
    };
</script>
</body>
</html>
